name: Build PyQt5 Executables and Create Release

on:
    push:
        branches: [ master ]
    workflow_dispatch:
        branches: [ master ]

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build_date: ${{ steps.version.outputs.build_date }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from Python file
        id: version
        run: |
          echo "Reading version from _version.py..."
          VERSION=$(grep -E "^__version__\s*=\s*" _version.py | awk -F'"' '{print $2}')
          BUILD_DATE=$(grep -E "^__build_date__\s*=\s*" _version.py | awk -F'"' '{print $2}')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not extract version from _version.py"
            exit 1
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"
          echo "Extracted build date: ${BUILD_DATE}"

  build-windows:
    needs: get-version
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
      
      # Install Node.js and png2icons
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install png2icons
        run: npm install -g png2icons

      # Convert logo.png to .ico
      - name: Generate Windows .ico icon
        run: |
          png2icons ./img/logo.png ./img/logo -icowe
      
      - name: Build EXE with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon "img/logo.ico" --add-data "img/;img/" --splash "img/Splash_screen.png" YGOProxyPrinter_UI.py

      - name: Create ZIP archive
        run: |
          7z a dist/YGOProxyPrinter-windows-${{ needs.get-version.outputs.version }}.zip dist/YGOProxyPrinter_UI.exe

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: YGOProxyPrinter-windows
          path: dist/YGOProxyPrinter-windows-${{ needs.get-version.outputs.version }}.zip

  build-linux:
    needs: get-version
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.12'

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y libxcb-xinerama0 p7zip-full
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
      
      # Install Node.js and png2icons
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install png2icons
        run: npm install -g png2icons

      # Convert logo.png to .ico
      - name: Generate .ico icon
        run: |
          png2icons ./img/logo.png ./img/logo -ico
      
      - name: Build Linux Binary
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=img/logo.ico --add-data=img:img --splash "img/Splash_screen.png" YGOProxyPrinter_UI.py

      - name: Create ZIP archive
        run: |
          7z a dist/YGOProxyPrinter-linux-${{ needs.get-version.outputs.version }}.zip dist/YGOProxyPrinter_UI

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: YGOProxyPrinter-linux
          path: dist/YGOProxyPrinter-linux-${{ needs.get-version.outputs.version }}.zip

  build-macos:
    needs: get-version
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller
      
      # Install Node.js and png2icons
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install png2icons
        run: npm install -g png2icons

      # Convert logo.png to .icns (macOS icon format)
      - name: Generate macOS .icns icon
        run: |
          png2icons ./img/logo.png ./img/logo -icns

      - name: Build macOS App bundle
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=img/logo.icns --add-data=img:img --name "YGOProxyPrinter_UI" YGOProxyPrinter_UI.py
      
      # Package the .app into a ZIP for easier download
      - name: Create ZIP archive
        run: |
          cd dist
          zip -r YGOProxyPrinter-macos-${{ needs.get-version.outputs.version }}.zip YGOProxyPrinter_UI.app

      # Upload the final .app bundle as an artifact
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: YGOProxyPrinter-macos
          path: dist/YGOProxyPrinter-macos-${{ needs.get-version.outputs.version }}.zip

  create-release:
    needs: [get-version, build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          name: YGOProxyPrinter ${{ needs.get-version.outputs.version }} (${{ needs.get-version.outputs.build_date }})
          body: |
            Automated release for YGOProxyPrinter version ${{ needs.get-version.outputs.version }}
            
            **Build date:** ${{ needs.get-version.outputs.build_date }}
            
            **Downloads:**
            - Windows: YGOProxyPrinter-windows-${{ needs.get-version.outputs.version }}.zip
            - Linux: YGOProxyPrinter-linux-${{ needs.get-version.outputs.version }}.zip
            - macOS: YGOProxyPrinter-macos-${{ needs.get-version.outputs.version }}.zip
          files: |
            artifacts/YGOProxyPrinter-windows/YGOProxyPrinter-windows-${{ needs.get-version.outputs.version }}.zip
            artifacts/YGOProxyPrinter-linux/YGOProxyPrinter-linux-${{ needs.get-version.outputs.version }}.zip
            artifacts/YGOProxyPrinter-macos/YGOProxyPrinter-macos-${{ needs.get-version.outputs.version }}.zip
          draft: false
          prerelease: false